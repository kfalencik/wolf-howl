//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
  @include container-fixed;

  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }

}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  @include container-fixed;
  max-width:1440px;
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {

  @include make-row($grid-gutter-width-xs);

  @media (min-width: $screen-sm-min) {
    @include make-row($grid-gutter-width-sm);
  }
  @media (min-width: $screen-md-min) {
    @include make-row;
  }
  @media (min-width: $screen-lg-min) {
    @include make-row($grid-gutter-width-lg);
  }

}

.row {
    &.padded {
        padding:ceil(($grid-gutter-width-sm)) ceil(($grid-gutter-width-sm / 2)) 0;

      @media (min-width: $screen-md-min) {
        padding:ceil(($grid-gutter-width)) ceil(($grid-gutter-width/ 2)) 0;
      }
      @media (min-width: $screen-lg-min) {
        padding: ceil(($grid-gutter-width-lg)) ceil(($grid-gutter-width-lg / 2)) 0;
      }

  }
}



// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns;


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}


//add margin bottom to colum that is equivalent to gutter, for use in square grids.
@mixin pseudo-vertical-gutter() {
  padding-bottom:ceil(($grid-gutter-width-xs));

  @media (min-width: $screen-sm-min) {
    padding-bottom:ceil(($grid-gutter-width-sm));

  }
  @media (min-width: $screen-md-min) {
    padding-bottom:ceil(($grid-gutter-width));

  }
  @media (min-width: $screen-lg-min) {
    padding-bottom:ceil(($grid-gutter-width-lg));

  }
}

@mixin image-pseudo-gutter() {
  padding:ceil(($grid-gutter-width-xs));

  @media (min-width: $screen-sm-min) {
    padding:ceil(($grid-gutter-width-sm));

  }
  @media (min-width: $screen-md-min) {
    padding:ceil(($grid-gutter-width));

  }
  @media (min-width: $screen-lg-min) {
    padding:ceil(($grid-gutter-width-lg));
  }

}

@mixin fullbleed-column() {
  margin-right:ceil(($grid-gutter-width-xs *-1));
  margin-left:ceil(($grid-gutter-width-xs *-1));

  @media (min-width: $screen-sm-min) {
    margin-right:ceil(($grid-gutter-width-sm *-1));
	margin-left:ceil(($grid-gutter-width-sm *-1));

  }
  @media (min-width: $screen-md-min) {
    margin-right:ceil(($grid-gutter-width *-1));
	margin-left:ceil(($grid-gutter-width *-1));

  }
  @media (min-width: $screen-lg-min) {
    margin-right:ceil(($grid-gutter-width-lg *-1));
	margin-left:ceil(($grid-gutter-width-lg *-1));

  }
}
